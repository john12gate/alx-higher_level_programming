Case when matrix is not a list:

>>> matrix = "not a list"
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "2-matrix_divided.py", line 5, in matrix_divided
    raise TypeError("matrix must be a matrix (list of lists) of integers/floats")
TypeError: matrix must be a matrix (list of lists) of integers/floats

Case when matrix is None:

>>> matrix = None
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "2-matrix_divided.py", line 5, in matrix_divided
    raise TypeError("matrix must be a matrix (list of lists) of integers/floats")
TypeError: matrix must be a matrix (list of lists) of integers/floats

Case when matrix is an empty list:

>>> matrix = []
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "2-matrix_divided.py", line 5, in matrix_divided
    raise TypeError("matrix must be a matrix (list of lists) of integers/floats")
TypeError: matrix must be a matrix (list of lists) of integers/floats

Case when matrix is a list of empty lists:
>>> matrix = [[]]
>>> print(matrix_divided(matrix, 3))
[[]]

Case when matrix is not a list of lists:
>>> matrix = [1, 2, 3]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "2-matrix_divided.py", line 13, in matrix_divided
    raise TypeError("matrix must be a matrix (list of lists) of integers/floats")
TypeError: matrix must be a matrix (list of lists) of integers/floats


Case when an element in matrix is not an int or a float:
>>> matrix = [
...     [1, 2, 3],
...     [4, "not a number", 6]
... ]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "2-matrix_divided.py", line 19, in matrix_divided
    raise TypeError("matrix must be a matrix (list of lists) of integers/floats")
TypeError: matrix must be a matrix (list of lists) of integers/floats


Case when the rows of matrix have different sizes:
>>> matrix = [
...     [1, 2, 3, 4],
...     [5, 6, 7]
... ]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "2-matrix_divided.py", line 28, in matrix_divided
    raise TypeError("Each row of the matrix must have the same size")
TypeError: Each row of the matrix must have the same size
